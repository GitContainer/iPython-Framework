# This file is generated by objective.metadata
#
# Last update: Sun Sep 17 14:39:54 2017

import objc, sys

if sys.maxsize > 2 ** 32:
    def sel32or64(a, b): return b
else:
    def sel32or64(a, b): return a
if sys.byteorder == 'little':
    def littleOrBig(a, b): return a
else:
    def littleOrBig(a, b): return b

misc= {'CGPoint': objc.createStructType('CGPoint', sel32or64(b'{_CGPoint=ff}', b'{CGPoint=dd}'), ['x', 'y']), 'CGEventTapInformation': objc.createStructType('CGEventTapInformation', b'{__CGEventTapInformation=IIIQiiBfff}', ['eventTapID', 'tapPoint', 'options', 'eventsOfInterest', 'tappingProcess', 'processBeingTapped', 'enabled', 'minUsecLatency', 'avgUsecLatency', 'maxUsecLatency']), 'CGDataProviderSequentialCallbacks': objc.createStructType('CGDataProviderSequentialCallbacks', b'{CGDataProviderSequentialCallbacks=I^?^?^?^?}', []), 'CGVector': objc.createStructType('CGVector', sel32or64(b'{CGVector=ff}', b'{CGVector=dd}'), ['dx', 'dy']), 'CGPatternCallbacks': objc.createStructType('CGPatternCallbacks', b'{CGPatternCallbacks=I^?^?}', []), 'CGSize': objc.createStructType('CGSize', sel32or64(b'{_CGSize=ff}', b'{CGSize=dd}'), ['width', 'height']), 'CGDeviceColor': objc.createStructType('CGDeviceColor', b'{CGDeviceColor=fff}', ['red', 'green', 'blue']), 'CGAffineTransform': objc.createStructType('CGAffineTransform', sel32or64(b'{CGAffineTransform=ffffff}', b'{CGAffineTransform=dddddd}'), ['a', 'b', 'c', 'd', 'tx', 'ty']), 'CGDataConsumerCallbacks': objc.createStructType('CGDataConsumerCallbacks', b'{CGDataConsumerCallbacks=^?^?}', []), 'CGDataProviderDirectAccessCallbacks': objc.createStructType('CGDataProviderDirectAccessCallbacks', b'{CGDataProviderDirectAccessCallbacks=^?^?^?^?}', []), 'CGPathElement': objc.createStructType('CGPathElement', sel32or64(b'{CGPathElement=I^{CGPoint=ff}}', b'{CGPathElement=I^{CGPoint=dd}}'), ['type', 'points']), 'CGScreenUpdateMoveDelta': objc.createStructType('CGScreenUpdateMoveDelta', b'{CGScreenUpdateMoveDelta=ii}', ['dX', 'dY']), 'CGDataProviderCallbacks': objc.createStructType('CGDataProviderCallbacks', b'{CGDataProviderCallbacks=^?^?^?^?}', []), 'CGPSConverterCallbacks': objc.createStructType('CGPSConverterCallbacks', b'{CGPSConverterCallbacks=I^?^?^?^?^?^?^?}', []), 'CGRect': objc.createStructType('CGRect', sel32or64(b'{_CGRect={_CGPoint=ff}{_CGSize=ff}}', b'{CGRect={CGPoint=dd}{CGSize=dd}}'), ['origin', 'size'])}
constants = '''$$'''
constants = constants + '$CGRectZero@%s$'%(sel32or64('{CGRect={CGPoint=ff}{CGSize=ff}}', '{CGRect={CGPoint=dd}{CGSize=dd}}'),)
constants = constants + '$CGAffineTransformIdentity@%s$'%(sel32or64('{CGAffineTransform=ffffff}', '{CGAffineTransform=dddddd}'),)
constants = constants + '$CGRectNull@%s$'%(sel32or64('{CGRect={CGPoint=ff}{CGSize=ff}}', '{CGRect={CGPoint=dd}{CGSize=dd}}'),)
constants = constants + '$CGPointZero@%s$'%(sel32or64('{CGPoint=ff}', '{CGPoint=dd}'),)
constants = constants + '$CGRectInfinite@%s$'%(sel32or64('{CGRect={CGPoint=ff}{CGSize=ff}}', '{CGRect={CGPoint=dd}{CGSize=dd}}'),)
constants = constants + '$CGSizeZero@%s$'%(sel32or64('{CGSize=ff}', '{CGSize=dd}'),)
enums = '''$$'''
functions={'CGRectGetMidX': (sel32or64(b'f{CGRect={CGPoint=ff}{CGSize=ff}}', b'd{CGRect={CGPoint=dd}{CGSize=dd}}'),), 'CGRectGetMidY': (sel32or64(b'f{CGRect={CGPoint=ff}{CGSize=ff}}', b'd{CGRect={CGPoint=dd}{CGSize=dd}}'),), 'CGVectorMake': (sel32or64(b'{CGVector=ff}ff', b'{CGVector=dd}dd'),), 'CGPointMake': (sel32or64(b'{CGPoint=ff}ff', b'{CGPoint=dd}dd'),), 'CGSizeMake': (sel32or64(b'{CGSize=ff}ff', b'{CGSize=dd}dd'),), 'CGAffineTransformMakeScale': (sel32or64(b'{CGAffineTransform=ffffff}ff', b'{CGAffineTransform=dddddd}dd'),), 'CGRectMake': (sel32or64(b'{CGRect={CGPoint=ff}{CGSize=ff}}ffff', b'{CGRect={CGPoint=dd}{CGSize=dd}}dddd'),), 'CGPDFDocumentGetVersion': (b'v^{CGPDFDocument=}^i^i', '', {'arguments': {1: {'type_modifier': 'o'}, 2: {'type_modifier': 'o'}}}), 'CGContextAddArcToPoint': (sel32or64(b'v^{CGContext=}fffff', b'v^{CGContext=}ddddd'),), 'CGRectIntersection': (sel32or64(b'{CGRect={CGPoint=ff}{CGSize=ff}}{CGRect={CGPoint=ff}{CGSize=ff}}{CGRect={CGPoint=ff}{CGSize=ff}}', b'{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}{CGRect={CGPoint=dd}{CGSize=dd}}'),), 'CGDataConsumerRetain': (b'^{CGDataConsumer=}^{CGDataConsumer=}',)}
aliases = {}
cftypes=[('CGEventRef', b'^{__CGEvent=}', 'CGEventGetTypeID', None)]
expressions = {}

# END OF FILE
